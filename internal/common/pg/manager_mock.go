// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/pg/manager.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/pg/manager.go -destination=/var/yandex-project/gofermart/internal/pg/manager_mock.go -package=pg
//

// Package pg is a generated GoMock package.
package pg

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTXManager is a mock of TXManager interface.
type MockTXManager struct {
	ctrl     *gomock.Controller
	recorder *MockTXManagerMockRecorder
	isgomock struct{}
}

// MockTXManagerMockRecorder is the mock recorder for MockTXManager.
type MockTXManagerMockRecorder struct {
	mock *MockTXManager
}

// NewMockTXManager creates a new mock instance.
func NewMockTXManager(ctrl *gomock.Controller) *MockTXManager {
	mock := &MockTXManager{ctrl: ctrl}
	mock.recorder = &MockTXManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTXManager) EXPECT() *MockTXManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTXManager) Begin(ctx context.Context, fn TransactionalFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockTXManagerMockRecorder) Begin(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTXManager)(nil).Begin), ctx, fn)
}
