// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=service_mock.go -source=service.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	pg "github.com/GlebRadaev/password-manager/internal/common/pg"
	models "github.com/GlebRadaev/password-manager/internal/data/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockRepo) CreateData(ctx context.Context, data models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockRepoMockRecorder) CreateData(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockRepo)(nil).CreateData), ctx, data)
}

// DeleteData mocks base method.
func (m *MockRepo) DeleteData(ctx context.Context, userID, dataID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, userID, dataID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockRepoMockRecorder) DeleteData(ctx, userID, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockRepo)(nil).DeleteData), ctx, userID, dataID)
}

// GetData mocks base method.
func (m *MockRepo) GetData(ctx context.Context, userID, dataID string) (models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userID, dataID)
	ret0, _ := ret[0].(models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockRepoMockRecorder) GetData(ctx, userID, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockRepo)(nil).GetData), ctx, userID, dataID)
}

// ListData mocks base method.
func (m *MockRepo) ListData(ctx context.Context, userID string) ([]models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", ctx, userID)
	ret0, _ := ret[0].([]models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockRepoMockRecorder) ListData(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockRepo)(nil).ListData), ctx, userID)
}

// UpdateData mocks base method.
func (m *MockRepo) UpdateData(ctx context.Context, data models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockRepoMockRecorder) UpdateData(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockRepo)(nil).UpdateData), ctx, data)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
	isgomock struct{}
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxManager) Begin(ctx context.Context, fn pg.TransactionalFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockTxManagerMockRecorder) Begin(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxManager)(nil).Begin), ctx, fn)
}
