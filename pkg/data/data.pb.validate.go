// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: data.proto

package data

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _data_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on AddDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddDataRequestMultiError,
// or nil if none found.
func (m *AddDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = AddDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddDataRequest_Type_InLookup[m.GetType()]; !ok {
		err := AddDataRequestValidationError{
			field:  "Type",
			reason: "value must be in list [LOGIN_PASSWORD TEXT BINARY CARD]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := AddDataRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddDataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddDataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddDataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddDataRequestMultiError(errors)
	}

	return nil
}

func (m *AddDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddDataRequestMultiError is an error wrapping multiple validation errors
// returned by AddDataRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDataRequestMultiError) AllErrors() []error { return m }

// AddDataRequestValidationError is the validation error returned by
// AddDataRequest.Validate if the designated constraints aren't met.
type AddDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDataRequestValidationError) ErrorName() string { return "AddDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDataRequestValidationError{}

var _AddDataRequest_Type_InLookup = map[DataType]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on AddDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDataResponseMultiError, or nil if none found.
func (m *AddDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	if len(errors) > 0 {
		return AddDataResponseMultiError(errors)
	}

	return nil
}

// AddDataResponseMultiError is an error wrapping multiple validation errors
// returned by AddDataResponse.ValidateAll() if the designated constraints
// aren't met.
type AddDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDataResponseMultiError) AllErrors() []error { return m }

// AddDataResponseValidationError is the validation error returned by
// AddDataResponse.Validate if the designated constraints aren't met.
type AddDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDataResponseValidationError) ErrorName() string { return "AddDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDataResponseValidationError{}

// Validate checks the field values on UpdateDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDataRequestMultiError, or nil if none found.
func (m *UpdateDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = UpdateDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := UpdateDataRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDataRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateDataRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDataRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDataRequestMultiError) AllErrors() []error { return m }

// UpdateDataRequestValidationError is the validation error returned by
// UpdateDataRequest.Validate if the designated constraints aren't met.
type UpdateDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDataRequestValidationError) ErrorName() string {
	return "UpdateDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDataRequestValidationError{}

// Validate checks the field values on UpdateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDataResponseMultiError, or nil if none found.
func (m *UpdateDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateDataResponseMultiError(errors)
	}

	return nil
}

// UpdateDataResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateDataResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDataResponseMultiError) AllErrors() []error { return m }

// UpdateDataResponseValidationError is the validation error returned by
// UpdateDataResponse.Validate if the designated constraints aren't met.
type UpdateDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDataResponseValidationError) ErrorName() string {
	return "UpdateDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDataResponseValidationError{}

// Validate checks the field values on DeleteDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataRequestMultiError, or nil if none found.
func (m *DeleteDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = DeleteDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDataRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteDataRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDataRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataRequestMultiError) AllErrors() []error { return m }

// DeleteDataRequestValidationError is the validation error returned by
// DeleteDataRequest.Validate if the designated constraints aren't met.
type DeleteDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataRequestValidationError) ErrorName() string {
	return "DeleteDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataRequestValidationError{}

// Validate checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataResponseMultiError, or nil if none found.
func (m *DeleteDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteDataResponseMultiError(errors)
	}

	return nil
}

// DeleteDataResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteDataResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataResponseMultiError) AllErrors() []error { return m }

// DeleteDataResponseValidationError is the validation error returned by
// DeleteDataResponse.Validate if the designated constraints aren't met.
type DeleteDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataResponseValidationError) ErrorName() string {
	return "DeleteDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataResponseValidationError{}

// Validate checks the field values on ListDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataRequestMultiError, or nil if none found.
func (m *ListDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDataRequestMultiError(errors)
	}

	return nil
}

func (m *ListDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListDataRequestMultiError is an error wrapping multiple validation errors
// returned by ListDataRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataRequestMultiError) AllErrors() []error { return m }

// ListDataRequestValidationError is the validation error returned by
// ListDataRequest.Validate if the designated constraints aren't met.
type ListDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataRequestValidationError) ErrorName() string { return "ListDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataRequestValidationError{}

// Validate checks the field values on ListDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataResponseMultiError, or nil if none found.
func (m *ListDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDataResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDataResponseMultiError(errors)
	}

	return nil
}

// ListDataResponseMultiError is an error wrapping multiple validation errors
// returned by ListDataResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataResponseMultiError) AllErrors() []error { return m }

// ListDataResponseValidationError is the validation error returned by
// ListDataResponse.Validate if the designated constraints aren't met.
type ListDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataResponseValidationError) ErrorName() string { return "ListDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataResponseValidationError{}

// Validate checks the field values on GetDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDataRequestMultiError,
// or nil if none found.
func (m *GetDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = GetDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDataRequestMultiError(errors)
	}

	return nil
}

func (m *GetDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRequestMultiError) AllErrors() []error { return m }

// GetDataRequestValidationError is the validation error returned by
// GetDataRequest.Validate if the designated constraints aren't met.
type GetDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRequestValidationError) ErrorName() string { return "GetDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRequestValidationError{}

// Validate checks the field values on GetDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataResponseMultiError, or nil if none found.
func (m *GetDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDataResponseMultiError(errors)
	}

	return nil
}

// GetDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataResponseMultiError) AllErrors() []error { return m }

// GetDataResponseValidationError is the validation error returned by
// GetDataResponse.Validate if the designated constraints aren't met.
type GetDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataResponseValidationError) ErrorName() string { return "GetDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataResponseValidationError{}

// Validate checks the field values on DataEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataEntryMultiError, or nil
// if none found.
func (m *DataEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *DataEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Type

	// no validation rules for Data

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataEntryValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataEntryValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataEntryValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataEntryMultiError(errors)
	}

	return nil
}

// DataEntryMultiError is an error wrapping multiple validation errors returned
// by DataEntry.ValidateAll() if the designated constraints aren't met.
type DataEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataEntryMultiError) AllErrors() []error { return m }

// DataEntryValidationError is the validation error returned by
// DataEntry.Validate if the designated constraints aren't met.
type DataEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataEntryValidationError) ErrorName() string { return "DataEntryValidationError" }

// Error satisfies the builtin error interface
func (e DataEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataEntryValidationError{}

// Validate checks the field values on BatchProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchProcessRequestMultiError, or nil if none found.
func (m *BatchProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = BatchProcessRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetOperations()); l < 1 || l > 100 {
		err := BatchProcessRequestValidationError{
			field:  "Operations",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOperations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchProcessRequestValidationError{
						field:  fmt.Sprintf("Operations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchProcessRequestValidationError{
						field:  fmt.Sprintf("Operations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchProcessRequestValidationError{
					field:  fmt.Sprintf("Operations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchProcessRequestMultiError(errors)
	}

	return nil
}

func (m *BatchProcessRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BatchProcessRequestMultiError is an error wrapping multiple validation
// errors returned by BatchProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchProcessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchProcessRequestMultiError) AllErrors() []error { return m }

// BatchProcessRequestValidationError is the validation error returned by
// BatchProcessRequest.Validate if the designated constraints aren't met.
type BatchProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchProcessRequestValidationError) ErrorName() string {
	return "BatchProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchProcessRequestValidationError{}

// Validate checks the field values on DataOperation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataOperationMultiError, or
// nil if none found.
func (m *DataOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *DataOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Operation.(type) {
	case *DataOperation_Add:
		if v == nil {
			err := DataOperationValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAdd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationValidationError{
					field:  "Add",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataOperation_Update:
		if v == nil {
			err := DataOperationValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataOperation_Delete:
		if v == nil {
			err := DataOperationValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DataOperationMultiError(errors)
	}

	return nil
}

// DataOperationMultiError is an error wrapping multiple validation errors
// returned by DataOperation.ValidateAll() if the designated constraints
// aren't met.
type DataOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataOperationMultiError) AllErrors() []error { return m }

// DataOperationValidationError is the validation error returned by
// DataOperation.Validate if the designated constraints aren't met.
type DataOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataOperationValidationError) ErrorName() string { return "DataOperationValidationError" }

// Error satisfies the builtin error interface
func (e DataOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataOperationValidationError{}

// Validate checks the field values on BatchProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchProcessResponseMultiError, or nil if none found.
func (m *BatchProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchProcessResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchProcessResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchProcessResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchProcessResponseMultiError(errors)
	}

	return nil
}

// BatchProcessResponseMultiError is an error wrapping multiple validation
// errors returned by BatchProcessResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchProcessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchProcessResponseMultiError) AllErrors() []error { return m }

// BatchProcessResponseValidationError is the validation error returned by
// BatchProcessResponse.Validate if the designated constraints aren't met.
type BatchProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchProcessResponseValidationError) ErrorName() string {
	return "BatchProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchProcessResponseValidationError{}

// Validate checks the field values on DataOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataOperationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataOperationResultMultiError, or nil if none found.
func (m *DataOperationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *DataOperationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Result.(type) {
	case *DataOperationResult_Add:
		if v == nil {
			err := DataOperationResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAdd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationResultValidationError{
					field:  "Add",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataOperationResult_Update:
		if v == nil {
			err := DataOperationResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationResultValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataOperationResult_Delete:
		if v == nil {
			err := DataOperationResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataOperationResultValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOperationResultValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DataOperationResultMultiError(errors)
	}

	return nil
}

// DataOperationResultMultiError is an error wrapping multiple validation
// errors returned by DataOperationResult.ValidateAll() if the designated
// constraints aren't met.
type DataOperationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataOperationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataOperationResultMultiError) AllErrors() []error { return m }

// DataOperationResultValidationError is the validation error returned by
// DataOperationResult.Validate if the designated constraints aren't met.
type DataOperationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataOperationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataOperationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataOperationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataOperationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataOperationResultValidationError) ErrorName() string {
	return "DataOperationResultValidationError"
}

// Error satisfies the builtin error interface
func (e DataOperationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataOperationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataOperationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataOperationResultValidationError{}
