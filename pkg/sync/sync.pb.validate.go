// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sync.proto

package sync

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _sync_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SyncDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncDataRequestMultiError, or nil if none found.
func (m *SyncDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SyncDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClientData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  fmt.Sprintf("ClientData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  fmt.Sprintf("ClientData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  fmt.Sprintf("ClientData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncDataRequestMultiError(errors)
	}

	return nil
}

func (m *SyncDataRequest) _validateUuid(uuid string) error {
	if matched := _sync_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SyncDataRequestMultiError is an error wrapping multiple validation errors
// returned by SyncDataRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncDataRequestMultiError) AllErrors() []error { return m }

// SyncDataRequestValidationError is the validation error returned by
// SyncDataRequest.Validate if the designated constraints aren't met.
type SyncDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncDataRequestValidationError) ErrorName() string { return "SyncDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncDataRequestValidationError{}

// Validate checks the field values on SyncDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncDataResponseMultiError, or nil if none found.
func (m *SyncDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConflicts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataResponseValidationError{
						field:  fmt.Sprintf("Conflicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataResponseValidationError{
						field:  fmt.Sprintf("Conflicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataResponseValidationError{
					field:  fmt.Sprintf("Conflicts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncDataResponseMultiError(errors)
	}

	return nil
}

// SyncDataResponseMultiError is an error wrapping multiple validation errors
// returned by SyncDataResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncDataResponseMultiError) AllErrors() []error { return m }

// SyncDataResponseValidationError is the validation error returned by
// SyncDataResponse.Validate if the designated constraints aren't met.
type SyncDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncDataResponseValidationError) ErrorName() string { return "SyncDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncDataResponseValidationError{}

// Validate checks the field values on ResolveConflictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveConflictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveConflictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveConflictRequestMultiError, or nil if none found.
func (m *ResolveConflictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveConflictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ResolveConflictRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetConflictId()); err != nil {
		err = ResolveConflictRequestValidationError{
			field:  "ConflictId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Strategy

	if len(errors) > 0 {
		return ResolveConflictRequestMultiError(errors)
	}

	return nil
}

func (m *ResolveConflictRequest) _validateUuid(uuid string) error {
	if matched := _sync_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ResolveConflictRequestMultiError is an error wrapping multiple validation
// errors returned by ResolveConflictRequest.ValidateAll() if the designated
// constraints aren't met.
type ResolveConflictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveConflictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveConflictRequestMultiError) AllErrors() []error { return m }

// ResolveConflictRequestValidationError is the validation error returned by
// ResolveConflictRequest.Validate if the designated constraints aren't met.
type ResolveConflictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveConflictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveConflictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveConflictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveConflictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveConflictRequestValidationError) ErrorName() string {
	return "ResolveConflictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveConflictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveConflictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveConflictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveConflictRequestValidationError{}

// Validate checks the field values on ResolveConflictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveConflictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveConflictResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveConflictResponseMultiError, or nil if none found.
func (m *ResolveConflictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveConflictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ResolveConflictResponseMultiError(errors)
	}

	return nil
}

// ResolveConflictResponseMultiError is an error wrapping multiple validation
// errors returned by ResolveConflictResponse.ValidateAll() if the designated
// constraints aren't met.
type ResolveConflictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveConflictResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveConflictResponseMultiError) AllErrors() []error { return m }

// ResolveConflictResponseValidationError is the validation error returned by
// ResolveConflictResponse.Validate if the designated constraints aren't met.
type ResolveConflictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveConflictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveConflictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveConflictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveConflictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveConflictResponseValidationError) ErrorName() string {
	return "ResolveConflictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveConflictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveConflictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveConflictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveConflictResponseValidationError{}

// Validate checks the field values on ListConflictsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConflictsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConflictsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConflictsRequestMultiError, or nil if none found.
func (m *ListConflictsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConflictsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListConflictsRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListConflictsRequestMultiError(errors)
	}

	return nil
}

func (m *ListConflictsRequest) _validateUuid(uuid string) error {
	if matched := _sync_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListConflictsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConflictsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConflictsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConflictsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConflictsRequestMultiError) AllErrors() []error { return m }

// ListConflictsRequestValidationError is the validation error returned by
// ListConflictsRequest.Validate if the designated constraints aren't met.
type ListConflictsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConflictsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConflictsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConflictsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConflictsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConflictsRequestValidationError) ErrorName() string {
	return "ListConflictsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConflictsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConflictsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConflictsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConflictsRequestValidationError{}

// Validate checks the field values on ListConflictsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConflictsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConflictsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConflictsResponseMultiError, or nil if none found.
func (m *ListConflictsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConflictsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConflicts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConflictsResponseValidationError{
						field:  fmt.Sprintf("Conflicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConflictsResponseValidationError{
						field:  fmt.Sprintf("Conflicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConflictsResponseValidationError{
					field:  fmt.Sprintf("Conflicts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConflictsResponseMultiError(errors)
	}

	return nil
}

// ListConflictsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConflictsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConflictsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConflictsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConflictsResponseMultiError) AllErrors() []error { return m }

// ListConflictsResponseValidationError is the validation error returned by
// ListConflictsResponse.Validate if the designated constraints aren't met.
type ListConflictsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConflictsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConflictsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConflictsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConflictsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConflictsResponseValidationError) ErrorName() string {
	return "ListConflictsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConflictsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConflictsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConflictsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConflictsResponseValidationError{}

// Validate checks the field values on Conflict with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conflict) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conflict with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConflictMultiError, or nil
// if none found.
func (m *Conflict) ValidateAll() error {
	return m.validate(true)
}

func (m *Conflict) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConflictId

	// no validation rules for DataId

	// no validation rules for ClientData

	// no validation rules for ServerData

	// no validation rules for Resolved

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ConflictMultiError(errors)
	}

	return nil
}

// ConflictMultiError is an error wrapping multiple validation errors returned
// by Conflict.ValidateAll() if the designated constraints aren't met.
type ConflictMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConflictMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConflictMultiError) AllErrors() []error { return m }

// ConflictValidationError is the validation error returned by
// Conflict.Validate if the designated constraints aren't met.
type ConflictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConflictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConflictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConflictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConflictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConflictValidationError) ErrorName() string { return "ConflictValidationError" }

// Error satisfies the builtin error interface
func (e ConflictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConflict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConflictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConflictValidationError{}

// Validate checks the field values on ClientData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientDataMultiError, or
// nil if none found.
func (m *ClientData) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Type

	// no validation rules for Data

	// no validation rules for Operation

	// no validation rules for UpdatedAt

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientDataValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientDataValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientDataValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClientDataMultiError(errors)
	}

	return nil
}

// ClientDataMultiError is an error wrapping multiple validation errors
// returned by ClientData.ValidateAll() if the designated constraints aren't met.
type ClientDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientDataMultiError) AllErrors() []error { return m }

// ClientDataValidationError is the validation error returned by
// ClientData.Validate if the designated constraints aren't met.
type ClientDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientDataValidationError) ErrorName() string { return "ClientDataValidationError" }

// Error satisfies the builtin error interface
func (e ClientDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientDataValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}
