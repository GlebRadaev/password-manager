// Code generated by MockGen. DO NOT EDIT.
// Source: data_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=data_mock.go -source=data_grpc.pb.go -package=data
//

// Package data is a generated GoMock package.
package data

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDataServiceClient is a mock of DataServiceClient interface.
type MockDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceClientMockRecorder
	isgomock struct{}
}

// MockDataServiceClientMockRecorder is the mock recorder for MockDataServiceClient.
type MockDataServiceClientMockRecorder struct {
	mock *MockDataServiceClient
}

// NewMockDataServiceClient creates a new mock instance.
func NewMockDataServiceClient(ctrl *gomock.Controller) *MockDataServiceClient {
	mock := &MockDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataServiceClient) EXPECT() *MockDataServiceClientMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockDataServiceClient) AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddData", varargs...)
	ret0, _ := ret[0].(*AddDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockDataServiceClientMockRecorder) AddData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockDataServiceClient)(nil).AddData), varargs...)
}

// BatchProcess mocks base method.
func (m *MockDataServiceClient) BatchProcess(ctx context.Context, in *BatchProcessRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchProcess", varargs...)
	ret0, _ := ret[0].(*BatchProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchProcess indicates an expected call of BatchProcess.
func (mr *MockDataServiceClientMockRecorder) BatchProcess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProcess", reflect.TypeOf((*MockDataServiceClient)(nil).BatchProcess), varargs...)
}

// DeleteData mocks base method.
func (m *MockDataServiceClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteData", varargs...)
	ret0, _ := ret[0].(*DeleteDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockDataServiceClientMockRecorder) DeleteData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockDataServiceClient)(nil).DeleteData), varargs...)
}

// GetData mocks base method.
func (m *MockDataServiceClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetData", varargs...)
	ret0, _ := ret[0].(*GetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockDataServiceClientMockRecorder) GetData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataServiceClient)(nil).GetData), varargs...)
}

// ListData mocks base method.
func (m *MockDataServiceClient) ListData(ctx context.Context, in *ListDataRequest, opts ...grpc.CallOption) (*ListDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListData", varargs...)
	ret0, _ := ret[0].(*ListDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockDataServiceClientMockRecorder) ListData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockDataServiceClient)(nil).ListData), varargs...)
}

// UpdateData mocks base method.
func (m *MockDataServiceClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateData", varargs...)
	ret0, _ := ret[0].(*UpdateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataServiceClientMockRecorder) UpdateData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDataServiceClient)(nil).UpdateData), varargs...)
}

// MockDataServiceServer is a mock of DataServiceServer interface.
type MockDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceServerMockRecorder
	isgomock struct{}
}

// MockDataServiceServerMockRecorder is the mock recorder for MockDataServiceServer.
type MockDataServiceServerMockRecorder struct {
	mock *MockDataServiceServer
}

// NewMockDataServiceServer creates a new mock instance.
func NewMockDataServiceServer(ctrl *gomock.Controller) *MockDataServiceServer {
	mock := &MockDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataServiceServer) EXPECT() *MockDataServiceServerMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockDataServiceServer) AddData(arg0 context.Context, arg1 *AddDataRequest) (*AddDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", arg0, arg1)
	ret0, _ := ret[0].(*AddDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockDataServiceServerMockRecorder) AddData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockDataServiceServer)(nil).AddData), arg0, arg1)
}

// BatchProcess mocks base method.
func (m *MockDataServiceServer) BatchProcess(arg0 context.Context, arg1 *BatchProcessRequest) (*BatchProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchProcess", arg0, arg1)
	ret0, _ := ret[0].(*BatchProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchProcess indicates an expected call of BatchProcess.
func (mr *MockDataServiceServerMockRecorder) BatchProcess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProcess", reflect.TypeOf((*MockDataServiceServer)(nil).BatchProcess), arg0, arg1)
}

// DeleteData mocks base method.
func (m *MockDataServiceServer) DeleteData(arg0 context.Context, arg1 *DeleteDataRequest) (*DeleteDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", arg0, arg1)
	ret0, _ := ret[0].(*DeleteDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockDataServiceServerMockRecorder) DeleteData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockDataServiceServer)(nil).DeleteData), arg0, arg1)
}

// GetData mocks base method.
func (m *MockDataServiceServer) GetData(arg0 context.Context, arg1 *GetDataRequest) (*GetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].(*GetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockDataServiceServerMockRecorder) GetData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataServiceServer)(nil).GetData), arg0, arg1)
}

// ListData mocks base method.
func (m *MockDataServiceServer) ListData(arg0 context.Context, arg1 *ListDataRequest) (*ListDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", arg0, arg1)
	ret0, _ := ret[0].(*ListDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockDataServiceServerMockRecorder) ListData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockDataServiceServer)(nil).ListData), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockDataServiceServer) UpdateData(arg0 context.Context, arg1 *UpdateDataRequest) (*UpdateDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*UpdateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataServiceServerMockRecorder) UpdateData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDataServiceServer)(nil).UpdateData), arg0, arg1)
}

// mustEmbedUnimplementedDataServiceServer mocks base method.
func (m *MockDataServiceServer) mustEmbedUnimplementedDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataServiceServer")
}

// mustEmbedUnimplementedDataServiceServer indicates an expected call of mustEmbedUnimplementedDataServiceServer.
func (mr *MockDataServiceServerMockRecorder) mustEmbedUnimplementedDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataServiceServer", reflect.TypeOf((*MockDataServiceServer)(nil).mustEmbedUnimplementedDataServiceServer))
}

// MockUnsafeDataServiceServer is a mock of UnsafeDataServiceServer interface.
type MockUnsafeDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDataServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeDataServiceServerMockRecorder is the mock recorder for MockUnsafeDataServiceServer.
type MockUnsafeDataServiceServerMockRecorder struct {
	mock *MockUnsafeDataServiceServer
}

// NewMockUnsafeDataServiceServer creates a new mock instance.
func NewMockUnsafeDataServiceServer(ctrl *gomock.Controller) *MockUnsafeDataServiceServer {
	mock := &MockUnsafeDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDataServiceServer) EXPECT() *MockUnsafeDataServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDataServiceServer mocks base method.
func (m *MockUnsafeDataServiceServer) mustEmbedUnimplementedDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataServiceServer")
}

// mustEmbedUnimplementedDataServiceServer indicates an expected call of mustEmbedUnimplementedDataServiceServer.
func (mr *MockUnsafeDataServiceServerMockRecorder) mustEmbedUnimplementedDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataServiceServer", reflect.TypeOf((*MockUnsafeDataServiceServer)(nil).mustEmbedUnimplementedDataServiceServer))
}
