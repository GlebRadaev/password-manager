// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -destination=api_mock.go -source=api.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	models "github.com/GlebRadaev/password-manager/internal/data/models"
	data "github.com/GlebRadaev/password-manager/pkg/data"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockService) AddData(ctx context.Context, entry models.DataEntry) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", ctx, entry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockServiceMockRecorder) AddData(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockService)(nil).AddData), ctx, entry)
}

// BatchProcess mocks base method.
func (m *MockService) BatchProcess(ctx context.Context, userID string, operations []*data.DataOperation) ([]*data.DataOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchProcess", ctx, userID, operations)
	ret0, _ := ret[0].([]*data.DataOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchProcess indicates an expected call of BatchProcess.
func (mr *MockServiceMockRecorder) BatchProcess(ctx, userID, operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProcess", reflect.TypeOf((*MockService)(nil).BatchProcess), ctx, userID, operations)
}

// DeleteData mocks base method.
func (m *MockService) DeleteData(ctx context.Context, userID, dataID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, userID, dataID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockServiceMockRecorder) DeleteData(ctx, userID, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockService)(nil).DeleteData), ctx, userID, dataID)
}

// ListData mocks base method.
func (m *MockService) ListData(ctx context.Context, userID string) ([]models.DataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", ctx, userID)
	ret0, _ := ret[0].([]models.DataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockServiceMockRecorder) ListData(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockService)(nil).ListData), ctx, userID)
}

// UpdateData mocks base method.
func (m *MockService) UpdateData(ctx context.Context, entry models.DataEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockServiceMockRecorder) UpdateData(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockService)(nil).UpdateData), ctx, entry)
}
