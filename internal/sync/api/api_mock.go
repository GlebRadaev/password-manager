// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -destination=api_mock.go -source=api.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	models "github.com/GlebRadaev/password-manager/internal/sync/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ListConflicts mocks base method.
func (m *MockService) ListConflicts(ctx context.Context, userID string) ([]models.Conflict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConflicts", ctx, userID)
	ret0, _ := ret[0].([]models.Conflict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConflicts indicates an expected call of ListConflicts.
func (mr *MockServiceMockRecorder) ListConflicts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConflicts", reflect.TypeOf((*MockService)(nil).ListConflicts), ctx, userID)
}

// ResolveConflict mocks base method.
func (m *MockService) ResolveConflict(ctx context.Context, conflictID string, strategy models.ResolutionStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveConflict", ctx, conflictID, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveConflict indicates an expected call of ResolveConflict.
func (mr *MockServiceMockRecorder) ResolveConflict(ctx, conflictID, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveConflict", reflect.TypeOf((*MockService)(nil).ResolveConflict), ctx, conflictID, strategy)
}

// SyncData mocks base method.
func (m *MockService) SyncData(ctx context.Context, userID string, clientData []models.ClientData) ([]models.Conflict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncData", ctx, userID, clientData)
	ret0, _ := ret[0].([]models.Conflict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncData indicates an expected call of SyncData.
func (mr *MockServiceMockRecorder) SyncData(ctx, userID, clientData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncData", reflect.TypeOf((*MockService)(nil).SyncData), ctx, userID, clientData)
}
