// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=service_mock.go -source=service.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/GlebRadaev/password-manager/internal/sync/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetChanges mocks base method.
func (m *MockRepo) GetChanges(ctx context.Context, userID string, lastSyncTime int64) ([]models.DataChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", ctx, userID, lastSyncTime)
	ret0, _ := ret[0].([]models.DataChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChanges indicates an expected call of GetChanges.
func (mr *MockRepoMockRecorder) GetChanges(ctx, userID, lastSyncTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockRepo)(nil).GetChanges), ctx, userID, lastSyncTime)
}

// GetChangesByDataID mocks base method.
func (m *MockRepo) GetChangesByDataID(ctx context.Context, userID, dataID string) ([]models.DataChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesByDataID", ctx, userID, dataID)
	ret0, _ := ret[0].([]models.DataChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangesByDataID indicates an expected call of GetChangesByDataID.
func (mr *MockRepoMockRecorder) GetChangesByDataID(ctx, userID, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesByDataID", reflect.TypeOf((*MockRepo)(nil).GetChangesByDataID), ctx, userID, dataID)
}

// SaveChanges mocks base method.
func (m *MockRepo) SaveChanges(ctx context.Context, changes []models.DataChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChanges", ctx, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChanges indicates an expected call of SaveChanges.
func (mr *MockRepoMockRecorder) SaveChanges(ctx, changes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChanges", reflect.TypeOf((*MockRepo)(nil).SaveChanges), ctx, changes)
}
