// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: data.proto

package data

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _data_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDataRequestMultiError, or nil if none found.
func (m *CreateDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(m.GetData()) < 1 {
		err := CreateDataRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateDataRequestMultiError(errors)
	}

	return nil
}

func (m *CreateDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateDataRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDataRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDataRequestMultiError) AllErrors() []error { return m }

// CreateDataRequestValidationError is the validation error returned by
// CreateDataRequest.Validate if the designated constraints aren't met.
type CreateDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDataRequestValidationError) ErrorName() string {
	return "CreateDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDataRequestValidationError{}

// Validate checks the field values on CreateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDataResponseMultiError, or nil if none found.
func (m *CreateDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	if len(errors) > 0 {
		return CreateDataResponseMultiError(errors)
	}

	return nil
}

// CreateDataResponseMultiError is an error wrapping multiple validation errors
// returned by CreateDataResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDataResponseMultiError) AllErrors() []error { return m }

// CreateDataResponseValidationError is the validation error returned by
// CreateDataResponse.Validate if the designated constraints aren't met.
type CreateDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDataResponseValidationError) ErrorName() string {
	return "CreateDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDataResponseValidationError{}

// Validate checks the field values on GetDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDataRequestMultiError,
// or nil if none found.
func (m *GetDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = GetDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDataRequestMultiError(errors)
	}

	return nil
}

func (m *GetDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRequestMultiError) AllErrors() []error { return m }

// GetDataRequestValidationError is the validation error returned by
// GetDataRequest.Validate if the designated constraints aren't met.
type GetDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRequestValidationError) ErrorName() string { return "GetDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRequestValidationError{}

// Validate checks the field values on GetDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataResponseMultiError, or nil if none found.
func (m *GetDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Data

	// no validation rules for Metadata

	if len(errors) > 0 {
		return GetDataResponseMultiError(errors)
	}

	return nil
}

// GetDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataResponseMultiError) AllErrors() []error { return m }

// GetDataResponseValidationError is the validation error returned by
// GetDataResponse.Validate if the designated constraints aren't met.
type GetDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataResponseValidationError) ErrorName() string { return "GetDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataResponseValidationError{}

// Validate checks the field values on UpdateDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDataRequestMultiError, or nil if none found.
func (m *UpdateDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = UpdateDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := UpdateDataRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UpdateDataRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateDataRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDataRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDataRequestMultiError) AllErrors() []error { return m }

// UpdateDataRequestValidationError is the validation error returned by
// UpdateDataRequest.Validate if the designated constraints aren't met.
type UpdateDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDataRequestValidationError) ErrorName() string {
	return "UpdateDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDataRequestValidationError{}

// Validate checks the field values on UpdateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDataResponseMultiError, or nil if none found.
func (m *UpdateDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateDataResponseMultiError(errors)
	}

	return nil
}

// UpdateDataResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateDataResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDataResponseMultiError) AllErrors() []error { return m }

// UpdateDataResponseValidationError is the validation error returned by
// UpdateDataResponse.Validate if the designated constraints aren't met.
type UpdateDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDataResponseValidationError) ErrorName() string {
	return "UpdateDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDataResponseValidationError{}

// Validate checks the field values on DeleteDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataRequestMultiError, or nil if none found.
func (m *DeleteDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDataId()); err != nil {
		err = DeleteDataRequestValidationError{
			field:  "DataId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDataRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteDataRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDataRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataRequestMultiError) AllErrors() []error { return m }

// DeleteDataRequestValidationError is the validation error returned by
// DeleteDataRequest.Validate if the designated constraints aren't met.
type DeleteDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataRequestValidationError) ErrorName() string {
	return "DeleteDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataRequestValidationError{}

// Validate checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataResponseMultiError, or nil if none found.
func (m *DeleteDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteDataResponseMultiError(errors)
	}

	return nil
}

// DeleteDataResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteDataResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataResponseMultiError) AllErrors() []error { return m }

// DeleteDataResponseValidationError is the validation error returned by
// DeleteDataResponse.Validate if the designated constraints aren't met.
type DeleteDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataResponseValidationError) ErrorName() string {
	return "DeleteDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataResponseValidationError{}

// Validate checks the field values on ListDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataRequestMultiError, or nil if none found.
func (m *ListDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListDataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDataRequestMultiError(errors)
	}

	return nil
}

func (m *ListDataRequest) _validateUuid(uuid string) error {
	if matched := _data_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListDataRequestMultiError is an error wrapping multiple validation errors
// returned by ListDataRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataRequestMultiError) AllErrors() []error { return m }

// ListDataRequestValidationError is the validation error returned by
// ListDataRequest.Validate if the designated constraints aren't met.
type ListDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataRequestValidationError) ErrorName() string { return "ListDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataRequestValidationError{}

// Validate checks the field values on ListDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataResponseMultiError, or nil if none found.
func (m *ListDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDataResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDataResponseMultiError(errors)
	}

	return nil
}

// ListDataResponseMultiError is an error wrapping multiple validation errors
// returned by ListDataResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataResponseMultiError) AllErrors() []error { return m }

// ListDataResponseValidationError is the validation error returned by
// ListDataResponse.Validate if the designated constraints aren't met.
type ListDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataResponseValidationError) ErrorName() string { return "ListDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataResponseValidationError{}
