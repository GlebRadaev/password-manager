// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -destination=api_mock.go -source=api.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	models "github.com/GlebRadaev/password-manager/internal/sync/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetChanges mocks base method.
func (m *MockService) GetChanges(ctx context.Context, userID string, lastSyncTime int64) ([]models.DataChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", ctx, userID, lastSyncTime)
	ret0, _ := ret[0].([]models.DataChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChanges indicates an expected call of GetChanges.
func (mr *MockServiceMockRecorder) GetChanges(ctx, userID, lastSyncTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockService)(nil).GetChanges), ctx, userID, lastSyncTime)
}

// PushChanges mocks base method.
func (m *MockService) PushChanges(ctx context.Context, userID string, changes []models.DataChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushChanges", ctx, userID, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushChanges indicates an expected call of PushChanges.
func (mr *MockServiceMockRecorder) PushChanges(ctx, userID, changes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushChanges", reflect.TypeOf((*MockService)(nil).PushChanges), ctx, userID, changes)
}
